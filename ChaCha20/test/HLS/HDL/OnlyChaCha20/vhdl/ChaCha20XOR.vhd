-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ChaCha20XOR is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    key_ce0 : OUT STD_LOGIC;
    key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    key_ce1 : OUT STD_LOGIC;
    key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    counter : IN STD_LOGIC_VECTOR (31 downto 0);
    nonce_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    nonce_ce0 : OUT STD_LOGIC;
    nonce_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    nonce_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    nonce_ce1 : OUT STD_LOGIC;
    nonce_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    inlen : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of ChaCha20XOR is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ChaCha20XOR_ChaCha20XOR,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z007s-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.196000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3389,HLS_SYN_LUT=5361,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv33_3F : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv33_1FFFFFFC1 : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111000001";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv64_40 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sext_ln152_fu_183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln152_reg_346 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln152_2_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln152_2_reg_351 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv_next_fu_288_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv_next_reg_362 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln157_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln157_fu_312_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln157_reg_384 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal s_ce0 : STD_LOGIC;
    signal s_we0 : STD_LOGIC;
    signal s_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_ce1 : STD_LOGIC;
    signal s_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal block_ce0 : STD_LOGIC;
    signal block_we0 : STD_LOGIC;
    signal block_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal block_ce1 : STD_LOGIC;
    signal block_we1 : STD_LOGIC;
    signal grp_chacha20_init_state_fu_160_ap_start : STD_LOGIC;
    signal grp_chacha20_init_state_fu_160_ap_done : STD_LOGIC;
    signal grp_chacha20_init_state_fu_160_ap_idle : STD_LOGIC;
    signal grp_chacha20_init_state_fu_160_ap_ready : STD_LOGIC;
    signal grp_chacha20_init_state_fu_160_s_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_chacha20_init_state_fu_160_s_ce0 : STD_LOGIC;
    signal grp_chacha20_init_state_fu_160_s_we0 : STD_LOGIC;
    signal grp_chacha20_init_state_fu_160_s_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_chacha20_init_state_fu_160_key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_chacha20_init_state_fu_160_key_ce0 : STD_LOGIC;
    signal grp_chacha20_init_state_fu_160_key_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_chacha20_init_state_fu_160_key_ce1 : STD_LOGIC;
    signal grp_chacha20_init_state_fu_160_nonce_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_chacha20_init_state_fu_160_nonce_ce0 : STD_LOGIC;
    signal grp_chacha20_init_state_fu_160_nonce_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_chacha20_init_state_fu_160_nonce_ce1 : STD_LOGIC;
    signal grp_chacha20_block_fu_172_ap_start : STD_LOGIC;
    signal grp_chacha20_block_fu_172_ap_done : STD_LOGIC;
    signal grp_chacha20_block_fu_172_ap_idle : STD_LOGIC;
    signal grp_chacha20_block_fu_172_ap_ready : STD_LOGIC;
    signal grp_chacha20_block_fu_172_in_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_chacha20_block_fu_172_in_r_ce0 : STD_LOGIC;
    signal grp_chacha20_block_fu_172_in_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_chacha20_block_fu_172_in_r_ce1 : STD_LOGIC;
    signal grp_chacha20_block_fu_172_out_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_chacha20_block_fu_172_out_r_ce0 : STD_LOGIC;
    signal grp_chacha20_block_fu_172_out_r_we0 : STD_LOGIC;
    signal grp_chacha20_block_fu_172_out_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_chacha20_block_fu_172_out_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_chacha20_block_fu_172_out_r_ce1 : STD_LOGIC;
    signal grp_chacha20_block_fu_172_out_r_we1 : STD_LOGIC;
    signal grp_chacha20_block_fu_172_out_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_1_reg_148 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_chacha20_init_state_fu_160_ap_start_reg : STD_LOGIC := '0';
    signal grp_chacha20_block_fu_172_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln152_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln162_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_74 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln155_fu_281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln152_fu_183_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln152_1_fu_187_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_191_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln152_1_fu_187_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln152_fu_199_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln152_fu_213_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_lshr_fu_219_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_1_fu_205_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln152_1_fu_229_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_2_fu_235_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_fu_191_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln152_fu_245_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal select_ln152_1_fu_253_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_3_fu_261_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln157_fu_303_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ChaCha20XOR_chacha20_init_state IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        key_ce0 : OUT STD_LOGIC;
        key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        key_ce1 : OUT STD_LOGIC;
        key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        counter : IN STD_LOGIC_VECTOR (31 downto 0);
        nonce_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        nonce_ce0 : OUT STD_LOGIC;
        nonce_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        nonce_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        nonce_ce1 : OUT STD_LOGIC;
        nonce_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component ChaCha20XOR_chacha20_block IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        in_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        in_r_ce1 : OUT STD_LOGIC;
        in_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        out_r_ce1 : OUT STD_LOGIC;
        out_r_we1 : OUT STD_LOGIC;
        out_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component ChaCha20XOR_s_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ChaCha20XOR_block_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    s_U : component ChaCha20XOR_s_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => s_address0,
        ce0 => s_ce0,
        we0 => s_we0,
        d0 => s_d0,
        q0 => s_q0,
        address1 => grp_chacha20_block_fu_172_in_r_address1,
        ce1 => s_ce1,
        q1 => s_q1);

    block_U : component ChaCha20XOR_block_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => block_address0,
        ce0 => block_ce0,
        we0 => block_we0,
        d0 => grp_chacha20_block_fu_172_out_r_d0,
        q0 => block_q0,
        address1 => grp_chacha20_block_fu_172_out_r_address1,
        ce1 => block_ce1,
        we1 => block_we1,
        d1 => grp_chacha20_block_fu_172_out_r_d1);

    grp_chacha20_init_state_fu_160 : component ChaCha20XOR_chacha20_init_state
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_chacha20_init_state_fu_160_ap_start,
        ap_done => grp_chacha20_init_state_fu_160_ap_done,
        ap_idle => grp_chacha20_init_state_fu_160_ap_idle,
        ap_ready => grp_chacha20_init_state_fu_160_ap_ready,
        s_address0 => grp_chacha20_init_state_fu_160_s_address0,
        s_ce0 => grp_chacha20_init_state_fu_160_s_ce0,
        s_we0 => grp_chacha20_init_state_fu_160_s_we0,
        s_d0 => grp_chacha20_init_state_fu_160_s_d0,
        key_address0 => grp_chacha20_init_state_fu_160_key_address0,
        key_ce0 => grp_chacha20_init_state_fu_160_key_ce0,
        key_q0 => key_q0,
        key_address1 => grp_chacha20_init_state_fu_160_key_address1,
        key_ce1 => grp_chacha20_init_state_fu_160_key_ce1,
        key_q1 => key_q1,
        counter => counter,
        nonce_address0 => grp_chacha20_init_state_fu_160_nonce_address0,
        nonce_ce0 => grp_chacha20_init_state_fu_160_nonce_ce0,
        nonce_q0 => nonce_q0,
        nonce_address1 => grp_chacha20_init_state_fu_160_nonce_address1,
        nonce_ce1 => grp_chacha20_init_state_fu_160_nonce_ce1,
        nonce_q1 => nonce_q1);

    grp_chacha20_block_fu_172 : component ChaCha20XOR_chacha20_block
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_chacha20_block_fu_172_ap_start,
        ap_done => grp_chacha20_block_fu_172_ap_done,
        ap_idle => grp_chacha20_block_fu_172_ap_idle,
        ap_ready => grp_chacha20_block_fu_172_ap_ready,
        in_r_address0 => grp_chacha20_block_fu_172_in_r_address0,
        in_r_ce0 => grp_chacha20_block_fu_172_in_r_ce0,
        in_r_q0 => s_q0,
        in_r_address1 => grp_chacha20_block_fu_172_in_r_address1,
        in_r_ce1 => grp_chacha20_block_fu_172_in_r_ce1,
        in_r_q1 => s_q1,
        out_r_address0 => grp_chacha20_block_fu_172_out_r_address0,
        out_r_ce0 => grp_chacha20_block_fu_172_out_r_ce0,
        out_r_we0 => grp_chacha20_block_fu_172_out_r_we0,
        out_r_d0 => grp_chacha20_block_fu_172_out_r_d0,
        out_r_address1 => grp_chacha20_block_fu_172_out_r_address1,
        out_r_ce1 => grp_chacha20_block_fu_172_out_r_ce1,
        out_r_we1 => grp_chacha20_block_fu_172_out_r_we1,
        out_r_d1 => grp_chacha20_block_fu_172_out_r_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_chacha20_block_fu_172_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_chacha20_block_fu_172_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln152_fu_276_p2 = ap_const_lv1_0))) then 
                    grp_chacha20_block_fu_172_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_chacha20_block_fu_172_ap_ready = ap_const_logic_1)) then 
                    grp_chacha20_block_fu_172_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_chacha20_init_state_fu_160_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_chacha20_init_state_fu_160_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_chacha20_init_state_fu_160_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_chacha20_init_state_fu_160_ap_ready = ap_const_logic_1)) then 
                    grp_chacha20_init_state_fu_160_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j_1_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_1_reg_148 <= add_ln157_reg_384;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_1_reg_148 <= j_fu_74;
            end if; 
        end if;
    end process;

    j_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_fu_74 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and ((icmp_ln159_fu_298_p2 = ap_const_lv1_0) or (icmp_ln157_fu_293_p2 = ap_const_lv1_0)))) then 
                j_fu_74 <= indvars_iv_next_reg_362;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln159_fu_298_p2 = ap_const_lv1_1) and (icmp_ln157_fu_293_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                add_ln157_reg_384 <= add_ln157_fu_312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                indvars_iv_next_reg_362 <= indvars_iv_next_fu_288_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    sext_ln152_2_reg_351(63 downto 6) <= sext_ln152_2_fu_269_p1(63 downto 6);
                sext_ln152_reg_346 <= sext_ln152_fu_183_p1;
            end if;
        end if;
    end process;
    sext_ln152_2_reg_351(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state7, icmp_ln157_fu_293_p2, icmp_ln159_fu_298_p2, grp_chacha20_init_state_fu_160_ap_done, grp_chacha20_block_fu_172_ap_done, ap_CS_fsm_state3, icmp_ln152_fu_276_p2, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_chacha20_init_state_fu_160_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln152_fu_276_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_chacha20_block_fu_172_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and ((icmp_ln159_fu_298_p2 = ap_const_lv1_0) or (icmp_ln157_fu_293_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln152_fu_199_p2 <= std_logic_vector(signed(sext_ln152_1_fu_187_p1) + signed(ap_const_lv33_3F));
    add_ln155_fu_281_p2 <= std_logic_vector(unsigned(s_q0) + unsigned(ap_const_lv32_1));
    add_ln157_fu_312_p2 <= std_logic_vector(unsigned(j_1_reg_148) + unsigned(ap_const_lv64_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_chacha20_init_state_fu_160_ap_done)
    begin
        if ((grp_chacha20_init_state_fu_160_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_chacha20_block_fu_172_ap_done)
    begin
        if ((grp_chacha20_block_fu_172_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state3, icmp_ln152_fu_276_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln152_fu_276_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln152_fu_276_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln152_fu_276_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    block_address0_assign_proc : process(ap_CS_fsm_state7, grp_chacha20_block_fu_172_out_r_address0, ap_CS_fsm_state4, zext_ln162_fu_307_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            block_address0 <= zext_ln162_fu_307_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            block_address0 <= grp_chacha20_block_fu_172_out_r_address0;
        else 
            block_address0 <= "XXXXXX";
        end if; 
    end process;


    block_ce0_assign_proc : process(ap_CS_fsm_state7, grp_chacha20_block_fu_172_out_r_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            block_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            block_ce0 <= grp_chacha20_block_fu_172_out_r_ce0;
        else 
            block_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    block_ce1_assign_proc : process(grp_chacha20_block_fu_172_out_r_ce1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            block_ce1 <= grp_chacha20_block_fu_172_out_r_ce1;
        else 
            block_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    block_we0_assign_proc : process(grp_chacha20_block_fu_172_out_r_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            block_we0 <= grp_chacha20_block_fu_172_out_r_we0;
        else 
            block_we0 <= ap_const_logic_0;
        end if; 
    end process;


    block_we1_assign_proc : process(grp_chacha20_block_fu_172_out_r_we1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            block_we1 <= grp_chacha20_block_fu_172_out_r_we1;
        else 
            block_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_chacha20_block_fu_172_ap_start <= grp_chacha20_block_fu_172_ap_start_reg;
    grp_chacha20_init_state_fu_160_ap_start <= grp_chacha20_init_state_fu_160_ap_start_reg;
    icmp_ln152_fu_276_p2 <= "1" when (j_fu_74 = sext_ln152_2_reg_351) else "0";
    icmp_ln157_fu_293_p2 <= "1" when (signed(j_1_reg_148) < signed(indvars_iv_next_reg_362)) else "0";
    icmp_ln159_fu_298_p2 <= "1" when (signed(j_1_reg_148) < signed(sext_ln152_reg_346)) else "0";
    in_r_address0 <= j_1_reg_148(7 - 1 downto 0);

    in_r_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indvars_iv_next_fu_288_p2 <= std_logic_vector(unsigned(j_fu_74) + unsigned(ap_const_lv64_40));
    key_address0 <= grp_chacha20_init_state_fu_160_key_address0;
    key_address1 <= grp_chacha20_init_state_fu_160_key_address1;
    key_ce0 <= grp_chacha20_init_state_fu_160_key_ce0;
    key_ce1 <= grp_chacha20_init_state_fu_160_key_ce1;
    nonce_address0 <= grp_chacha20_init_state_fu_160_nonce_address0;
    nonce_address1 <= grp_chacha20_init_state_fu_160_nonce_address1;
    nonce_ce0 <= grp_chacha20_init_state_fu_160_nonce_ce0;
    nonce_ce1 <= grp_chacha20_init_state_fu_160_nonce_ce1;
    out_r_address0 <= j_1_reg_148(7 - 1 downto 0);

    out_r_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= (in_r_q0 xor block_q0);

    out_r_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_lshr_fu_219_p4 <= sub_ln152_fu_213_p2(32 downto 6);

    s_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, grp_chacha20_init_state_fu_160_s_address0, grp_chacha20_block_fu_172_in_r_address0, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            s_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_address0 <= grp_chacha20_block_fu_172_in_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_address0 <= grp_chacha20_init_state_fu_160_s_address0;
        else 
            s_address0 <= "XXXX";
        end if; 
    end process;


    s_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, grp_chacha20_init_state_fu_160_s_ce0, grp_chacha20_block_fu_172_in_r_ce0, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            s_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_ce0 <= grp_chacha20_block_fu_172_in_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_ce0 <= grp_chacha20_init_state_fu_160_s_ce0;
        else 
            s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_ce1_assign_proc : process(grp_chacha20_block_fu_172_in_r_ce1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_ce1 <= grp_chacha20_block_fu_172_in_r_ce1;
        else 
            s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, grp_chacha20_init_state_fu_160_s_d0, add_ln155_fu_281_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            s_d0 <= add_ln155_fu_281_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_d0 <= grp_chacha20_init_state_fu_160_s_d0;
        else 
            s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, grp_chacha20_init_state_fu_160_s_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            s_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_we0 <= grp_chacha20_init_state_fu_160_s_we0;
        else 
            s_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln152_1_fu_253_p3 <= 
        ap_const_lv27_0 when (tmp_fu_191_p3(0) = '1') else 
        select_ln152_fu_245_p3;
    select_ln152_fu_245_p3 <= 
        sub_ln152_1_fu_229_p2 when (tmp_1_fu_205_p3(0) = '1') else 
        tmp_2_fu_235_p4;
    sext_ln152_1_fu_187_p0 <= inlen;
        sext_ln152_1_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln152_1_fu_187_p0),33));

        sext_ln152_2_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_261_p3),64));

    sext_ln152_fu_183_p0 <= inlen;
        sext_ln152_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln152_fu_183_p0),64));

    sub_ln152_1_fu_229_p2 <= std_logic_vector(unsigned(ap_const_lv27_0) - unsigned(p_lshr_fu_219_p4));
    sub_ln152_fu_213_p2 <= std_logic_vector(signed(ap_const_lv33_1FFFFFFC1) - signed(sext_ln152_1_fu_187_p1));
    tmp_1_fu_205_p3 <= add_ln152_fu_199_p2(32 downto 32);
    tmp_2_fu_235_p4 <= add_ln152_fu_199_p2(32 downto 6);
    tmp_3_fu_261_p3 <= (select_ln152_1_fu_253_p3 & ap_const_lv6_0);
    tmp_fu_191_p1 <= inlen;
    tmp_fu_191_p3 <= tmp_fu_191_p1(31 downto 31);
    trunc_ln157_fu_303_p1 <= j_1_reg_148(6 - 1 downto 0);
    zext_ln162_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln157_fu_303_p1),64));
end behav;
