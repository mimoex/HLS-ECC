// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ChaCha20XOR_chacha20_init_state (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_address0,
        s_ce0,
        s_we0,
        s_d0,
        key_address0,
        key_ce0,
        key_q0,
        key_address1,
        key_ce1,
        key_q1,
        counter,
        nonce_address0,
        nonce_ce0,
        nonce_q0,
        nonce_address1,
        nonce_ce1,
        nonce_q1
);

parameter    ap_ST_fsm_state1 = 22'd1;
parameter    ap_ST_fsm_state2 = 22'd2;
parameter    ap_ST_fsm_state3 = 22'd4;
parameter    ap_ST_fsm_state4 = 22'd8;
parameter    ap_ST_fsm_state5 = 22'd16;
parameter    ap_ST_fsm_state6 = 22'd32;
parameter    ap_ST_fsm_state7 = 22'd64;
parameter    ap_ST_fsm_state8 = 22'd128;
parameter    ap_ST_fsm_state9 = 22'd256;
parameter    ap_ST_fsm_state10 = 22'd512;
parameter    ap_ST_fsm_state11 = 22'd1024;
parameter    ap_ST_fsm_state12 = 22'd2048;
parameter    ap_ST_fsm_state13 = 22'd4096;
parameter    ap_ST_fsm_state14 = 22'd8192;
parameter    ap_ST_fsm_state15 = 22'd16384;
parameter    ap_ST_fsm_state16 = 22'd32768;
parameter    ap_ST_fsm_state17 = 22'd65536;
parameter    ap_ST_fsm_state18 = 22'd131072;
parameter    ap_ST_fsm_state19 = 22'd262144;
parameter    ap_ST_fsm_state20 = 22'd524288;
parameter    ap_ST_fsm_state21 = 22'd1048576;
parameter    ap_ST_fsm_state22 = 22'd2097152;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] s_address0;
output   s_ce0;
output   s_we0;
output  [31:0] s_d0;
output  [4:0] key_address0;
output   key_ce0;
input  [7:0] key_q0;
output  [4:0] key_address1;
output   key_ce1;
input  [7:0] key_q1;
input  [31:0] counter;
output  [3:0] nonce_address0;
output   nonce_ce0;
input  [7:0] nonce_q0;
output  [3:0] nonce_address1;
output   nonce_ce1;
input  [7:0] nonce_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] s_address0;
reg s_ce0;
reg s_we0;
reg[31:0] s_d0;
reg[4:0] key_address0;
reg key_ce0;
reg[4:0] key_address1;
reg key_ce1;
reg[3:0] nonce_address0;
reg nonce_ce0;
reg[3:0] nonce_address1;
reg nonce_ce1;

(* fsm_encoding = "none" *) reg   [21:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
reg   [3:0] i_2_reg_1357;
wire    ap_CS_fsm_state18;
wire   [4:0] shl_ln_fu_1055_p3;
reg   [4:0] shl_ln_reg_1365;
wire   [0:0] icmp_ln125_fu_1039_p2;
wire   [7:0] kv_q1;
reg   [7:0] t_reg_1381;
wire    ap_CS_fsm_state19;
wire   [7:0] kv_q0;
reg   [7:0] t_4_reg_1386;
reg   [4:0] kv_address0;
reg    kv_ce0;
reg    kv_we0;
reg   [4:0] kv_address1;
reg    kv_ce1;
reg    kv_we1;
reg   [2:0] nv_address0;
reg    nv_ce0;
reg    nv_we0;
wire   [7:0] nv_q0;
reg    nv_ce1;
wire   [7:0] nv_q1;
reg   [2:0] nv_1_address0;
reg    nv_1_ce0;
reg    nv_1_we0;
wire   [7:0] nv_1_q0;
reg    nv_1_ce1;
wire   [7:0] nv_1_q1;
wire    grp_chacha20_init_state_Pipeline_init_second_fu_1023_ap_start;
wire    grp_chacha20_init_state_Pipeline_init_second_fu_1023_ap_done;
wire    grp_chacha20_init_state_Pipeline_init_second_fu_1023_ap_idle;
wire    grp_chacha20_init_state_Pipeline_init_second_fu_1023_ap_ready;
wire   [2:0] grp_chacha20_init_state_Pipeline_init_second_fu_1023_nv_address0;
wire    grp_chacha20_init_state_Pipeline_init_second_fu_1023_nv_ce0;
wire   [2:0] grp_chacha20_init_state_Pipeline_init_second_fu_1023_nv_address1;
wire    grp_chacha20_init_state_Pipeline_init_second_fu_1023_nv_ce1;
wire   [2:0] grp_chacha20_init_state_Pipeline_init_second_fu_1023_nv_1_address0;
wire    grp_chacha20_init_state_Pipeline_init_second_fu_1023_nv_1_ce0;
wire   [2:0] grp_chacha20_init_state_Pipeline_init_second_fu_1023_nv_1_address1;
wire    grp_chacha20_init_state_Pipeline_init_second_fu_1023_nv_1_ce1;
wire   [3:0] grp_chacha20_init_state_Pipeline_init_second_fu_1023_s_address0;
wire    grp_chacha20_init_state_Pipeline_init_second_fu_1023_s_ce0;
wire    grp_chacha20_init_state_Pipeline_init_second_fu_1023_s_we0;
wire   [31:0] grp_chacha20_init_state_Pipeline_init_second_fu_1023_s_d0;
reg    grp_chacha20_init_state_Pipeline_init_second_fu_1023_ap_start_reg;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire   [63:0] zext_ln127_fu_1063_p1;
wire   [63:0] zext_ln128_fu_1074_p1;
wire   [63:0] zext_ln129_fu_1089_p1;
wire   [63:0] zext_ln130_fu_1099_p1;
wire   [63:0] zext_ln131_fu_1120_p1;
wire    ap_CS_fsm_state20;
reg   [3:0] i_fu_122;
wire   [3:0] add_ln125_fu_1045_p2;
wire   [31:0] value_fu_1104_p5;
wire   [2:0] trunc_ln127_fu_1051_p1;
wire   [4:0] or_ln128_fu_1068_p2;
wire   [4:0] or_ln129_fu_1084_p2;
wire   [4:0] or_ln130_fu_1094_p2;
wire   [3:0] add_ln131_fu_1115_p2;
reg   [21:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
reg    ap_ST_fsm_state22_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 22'd1;
#0 grp_chacha20_init_state_Pipeline_init_second_fu_1023_ap_start_reg = 1'b0;
end

ChaCha20XOR_chacha20_init_state_kv_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
kv_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(kv_address0),
    .ce0(kv_ce0),
    .we0(kv_we0),
    .d0(key_q0),
    .q0(kv_q0),
    .address1(kv_address1),
    .ce1(kv_ce1),
    .we1(kv_we1),
    .d1(key_q1),
    .q1(kv_q1)
);

ChaCha20XOR_chacha20_init_state_nv_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
nv_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(nv_address0),
    .ce0(nv_ce0),
    .we0(nv_we0),
    .d0(nonce_q1),
    .q0(nv_q0),
    .address1(grp_chacha20_init_state_Pipeline_init_second_fu_1023_nv_address1),
    .ce1(nv_ce1),
    .q1(nv_q1)
);

ChaCha20XOR_chacha20_init_state_nv_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
nv_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(nv_1_address0),
    .ce0(nv_1_ce0),
    .we0(nv_1_we0),
    .d0(nonce_q0),
    .q0(nv_1_q0),
    .address1(grp_chacha20_init_state_Pipeline_init_second_fu_1023_nv_1_address1),
    .ce1(nv_1_ce1),
    .q1(nv_1_q1)
);

ChaCha20XOR_chacha20_init_state_Pipeline_init_second grp_chacha20_init_state_Pipeline_init_second_fu_1023(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_chacha20_init_state_Pipeline_init_second_fu_1023_ap_start),
    .ap_done(grp_chacha20_init_state_Pipeline_init_second_fu_1023_ap_done),
    .ap_idle(grp_chacha20_init_state_Pipeline_init_second_fu_1023_ap_idle),
    .ap_ready(grp_chacha20_init_state_Pipeline_init_second_fu_1023_ap_ready),
    .nv_address0(grp_chacha20_init_state_Pipeline_init_second_fu_1023_nv_address0),
    .nv_ce0(grp_chacha20_init_state_Pipeline_init_second_fu_1023_nv_ce0),
    .nv_q0(nv_q0),
    .nv_address1(grp_chacha20_init_state_Pipeline_init_second_fu_1023_nv_address1),
    .nv_ce1(grp_chacha20_init_state_Pipeline_init_second_fu_1023_nv_ce1),
    .nv_q1(nv_q1),
    .nv_1_address0(grp_chacha20_init_state_Pipeline_init_second_fu_1023_nv_1_address0),
    .nv_1_ce0(grp_chacha20_init_state_Pipeline_init_second_fu_1023_nv_1_ce0),
    .nv_1_q0(nv_1_q0),
    .nv_1_address1(grp_chacha20_init_state_Pipeline_init_second_fu_1023_nv_1_address1),
    .nv_1_ce1(grp_chacha20_init_state_Pipeline_init_second_fu_1023_nv_1_ce1),
    .nv_1_q1(nv_1_q1),
    .s_address0(grp_chacha20_init_state_Pipeline_init_second_fu_1023_s_address0),
    .s_ce0(grp_chacha20_init_state_Pipeline_init_second_fu_1023_s_ce0),
    .s_we0(grp_chacha20_init_state_Pipeline_init_second_fu_1023_s_we0),
    .s_d0(grp_chacha20_init_state_Pipeline_init_second_fu_1023_s_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_chacha20_init_state_Pipeline_init_second_fu_1023_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state21)) begin
            grp_chacha20_init_state_Pipeline_init_second_fu_1023_ap_start_reg <= 1'b1;
        end else if ((grp_chacha20_init_state_Pipeline_init_second_fu_1023_ap_ready == 1'b1)) begin
            grp_chacha20_init_state_Pipeline_init_second_fu_1023_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_122 <= 4'd0;
    end else if (((icmp_ln125_fu_1039_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        i_fu_122 <= add_ln125_fu_1045_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        i_2_reg_1357 <= i_fu_122;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln125_fu_1039_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        shl_ln_reg_1365[4 : 2] <= shl_ln_fu_1055_p3[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        t_4_reg_1386 <= kv_q0;
        t_reg_1381 <= kv_q1;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

always @ (*) begin
    if ((grp_chacha20_init_state_Pipeline_init_second_fu_1023_ap_done == 1'b0)) begin
        ap_ST_fsm_state22_blk = 1'b1;
    end else begin
        ap_ST_fsm_state22_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((grp_chacha20_init_state_Pipeline_init_second_fu_1023_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_chacha20_init_state_Pipeline_init_second_fu_1023_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        key_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        key_address0 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        key_address0 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        key_address0 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        key_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        key_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        key_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        key_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        key_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        key_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        key_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        key_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        key_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        key_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        key_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        key_address0 = 64'd1;
    end else begin
        key_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        key_address1 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        key_address1 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        key_address1 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        key_address1 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        key_address1 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        key_address1 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        key_address1 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        key_address1 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        key_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        key_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        key_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        key_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        key_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        key_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        key_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        key_address1 = 64'd0;
    end else begin
        key_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        key_ce0 = 1'b1;
    end else begin
        key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        key_ce1 = 1'b1;
    end else begin
        key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        kv_address0 = zext_ln130_fu_1099_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        kv_address0 = zext_ln128_fu_1074_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        kv_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        kv_address0 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        kv_address0 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        kv_address0 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        kv_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        kv_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        kv_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        kv_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        kv_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        kv_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        kv_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        kv_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        kv_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        kv_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        kv_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kv_address0 = 64'd1;
    end else begin
        kv_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        kv_address1 = zext_ln129_fu_1089_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        kv_address1 = zext_ln127_fu_1063_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        kv_address1 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        kv_address1 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        kv_address1 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        kv_address1 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        kv_address1 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        kv_address1 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        kv_address1 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        kv_address1 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        kv_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        kv_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        kv_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        kv_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        kv_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        kv_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        kv_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kv_address1 = 64'd0;
    end else begin
        kv_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        kv_ce0 = 1'b1;
    end else begin
        kv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        kv_ce1 = 1'b1;
    end else begin
        kv_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        kv_we0 = 1'b1;
    end else begin
        kv_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        kv_we1 = 1'b1;
    end else begin
        kv_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        nonce_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        nonce_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        nonce_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        nonce_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        nonce_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        nonce_address0 = 64'd1;
    end else begin
        nonce_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        nonce_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        nonce_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        nonce_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        nonce_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        nonce_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        nonce_address1 = 64'd0;
    end else begin
        nonce_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        nonce_ce0 = 1'b1;
    end else begin
        nonce_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        nonce_ce1 = 1'b1;
    end else begin
        nonce_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        nv_1_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        nv_1_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        nv_1_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        nv_1_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        nv_1_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        nv_1_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        nv_1_address0 = grp_chacha20_init_state_Pipeline_init_second_fu_1023_nv_1_address0;
    end else begin
        nv_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        nv_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        nv_1_ce0 = grp_chacha20_init_state_Pipeline_init_second_fu_1023_nv_1_ce0;
    end else begin
        nv_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        nv_1_ce1 = grp_chacha20_init_state_Pipeline_init_second_fu_1023_nv_1_ce1;
    end else begin
        nv_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        nv_1_we0 = 1'b1;
    end else begin
        nv_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        nv_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        nv_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        nv_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        nv_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        nv_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        nv_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        nv_address0 = grp_chacha20_init_state_Pipeline_init_second_fu_1023_nv_address0;
    end else begin
        nv_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        nv_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        nv_ce0 = grp_chacha20_init_state_Pipeline_init_second_fu_1023_nv_ce0;
    end else begin
        nv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        nv_ce1 = grp_chacha20_init_state_Pipeline_init_second_fu_1023_nv_ce1;
    end else begin
        nv_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        nv_we0 = 1'b1;
    end else begin
        nv_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        s_address0 = zext_ln131_fu_1120_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        s_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        s_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        s_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        s_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        s_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        s_address0 = grp_chacha20_init_state_Pipeline_init_second_fu_1023_s_address0;
    end else begin
        s_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        s_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        s_ce0 = grp_chacha20_init_state_Pipeline_init_second_fu_1023_s_ce0;
    end else begin
        s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        s_d0 = value_fu_1104_p5;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        s_d0 = counter;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        s_d0 = 32'd1797285236;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        s_d0 = 32'd857760878;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        s_d0 = 32'd2036477234;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        s_d0 = 32'd1634760805;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        s_d0 = grp_chacha20_init_state_Pipeline_init_second_fu_1023_s_d0;
    end else begin
        s_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln125_fu_1039_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18)))) begin
        s_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        s_we0 = grp_chacha20_init_state_Pipeline_init_second_fu_1023_s_we0;
    end else begin
        s_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln125_fu_1039_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((grp_chacha20_init_state_Pipeline_init_second_fu_1023_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln125_fu_1045_p2 = (i_fu_122 + 4'd1);

assign add_ln131_fu_1115_p2 = (i_2_reg_1357 + 4'd4);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_chacha20_init_state_Pipeline_init_second_fu_1023_ap_start = grp_chacha20_init_state_Pipeline_init_second_fu_1023_ap_start_reg;

assign icmp_ln125_fu_1039_p2 = ((i_fu_122 == 4'd8) ? 1'b1 : 1'b0);

assign or_ln128_fu_1068_p2 = (shl_ln_fu_1055_p3 | 5'd1);

assign or_ln129_fu_1084_p2 = (shl_ln_reg_1365 | 5'd2);

assign or_ln130_fu_1094_p2 = (shl_ln_reg_1365 | 5'd3);

assign shl_ln_fu_1055_p3 = {{trunc_ln127_fu_1051_p1}, {2'd0}};

assign trunc_ln127_fu_1051_p1 = i_fu_122[2:0];

assign value_fu_1104_p5 = {{{{kv_q0}, {kv_q1}}, {t_4_reg_1386}}, {t_reg_1381}};

assign zext_ln127_fu_1063_p1 = shl_ln_fu_1055_p3;

assign zext_ln128_fu_1074_p1 = or_ln128_fu_1068_p2;

assign zext_ln129_fu_1089_p1 = or_ln129_fu_1084_p2;

assign zext_ln130_fu_1099_p1 = or_ln130_fu_1094_p2;

assign zext_ln131_fu_1120_p1 = add_ln131_fu_1115_p2;

always @ (posedge ap_clk) begin
    shl_ln_reg_1365[1:0] <= 2'b00;
end

endmodule //ChaCha20XOR_chacha20_init_state
